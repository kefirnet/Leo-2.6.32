--- init/main.c
+++ init/main.c
@@ -407,24 +407,16 @@
  * gcc-3.4 accidentally inlines this function, so use noinline.
  */
 
-static __initdata DECLARE_COMPLETION(kthreadd_done);
-
 static noinline void __init_refok rest_init(void)
 	__releases(kernel_lock)
 {
 	int pid;
 
 	rcu_scheduler_starting();
-	/*
-	 * We need to spawn init first so that it obtains pid-1, however
-	 * the init task will end up wanting to create kthreads, which, if
-	 * we schedule it before we create kthreadd, will OOPS.
-	 */
 	kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
 	numa_default_policy();
 	pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
 	kthreadd_task = find_task_by_pid_ns(pid, &init_pid_ns);
-	complete(&kthreadd_done);
 	unlock_kernel();
 
 	/*
@@ -849,10 +841,6 @@
 
 static int __init kernel_init(void * unused)
 {
-	/*
-	 * Wait until kthreadd is all set-up.
-	 */
-	wait_for_completion(&kthreadd_done);
 	lock_kernel();
 
 	/*
